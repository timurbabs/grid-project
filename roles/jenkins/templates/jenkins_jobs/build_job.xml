<?xml version="1.0" encoding="UTF-8"?><flow-definition plugin="workflow-job@2.41">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.1"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.1">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.33.1">
			<projectUrl>{{ github_project_url }}</projectUrl>
      <displayName/>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.33.1">
          <spec/>
        </com.cloudbees.jenkins.GitHubPushTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.93">
    <script>
pipeline {
    agent {
		label "{{ build_label }}"
    }
    triggers {
        githubPush()
    }
    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "https"
		NEXUS_URL = "{{ hostvars.nexus_linux.ansible_host_dns }}:8443"
        NEXUS_REPOSITORY = "petclinic-maven-hosted-snapshot"
        NEXUS_URL_CONTAINERS = "{{ hostvars.nexus_linux.ansible_host_dns }}:8444"
        NEXUS_CREDENTIAL_ID = "nexus"
        DOCKER_IMAGE_NAME = "petclinic-docker"
        DOCKER_IMAGE = ""
    }
    stages {
        stage("Clone code from GitHub") {
            steps {
					git branch: 'main', url: '{{ github_project_url }}'
            }
        }
        stage("Maven Build") {
            steps {
                script {
                    sh "./mvnw clean package"
                }
            }
        }
        stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }

        stage("Create DockerFile") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    def data = 'FROM openjdk:11\nWORKDIR /\nCOPY ./target/'+pom.artifactId+'-'+pom.version+'.jar'+' /target/\nEXPOSE 8080\nCMD java -jar /target/'+pom.artifactId+'-'+pom.version+'.jar'
                    writeFile(file: 'Dockerfile', text: data)
                }
            }
        }

        stage("Create Docker Image") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    DOCKER_IMAGE = docker.build("${DOCKER_IMAGE_NAME}-${pom.version}")
                }
            }
        }

        stage("Upload Docker Image to Nexus") {
            steps {
                script {
                    docker.withRegistry( NEXUS_PROTOCOL+'://'+NEXUS_URL_CONTAINERS, NEXUS_CREDENTIAL_ID ) {
                        DOCKER_IMAGE.push('latest')
                    }
                }
            }
        }

        stage('Throw parameters to Deployment job'){
            steps{
                script {
                    pom = readMavenPom file: "pom.xml";
                    build job: 'Deployment', wait: false, parameters: [string(name: 'VERSION', value: "${pom.version}")]
                }
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
