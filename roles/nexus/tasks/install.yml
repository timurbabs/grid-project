---
# tasks file for nexus-server-setup
- name: yum update
  yum:
    name: '*'
    state: latest

- name: yum install wget
  yum:
    name:
        - wget
        - groovy
        - java-1.8.0-openjdk.x86_64
    state: latest

- name: Checking that nexus is already installed
  stat:
    path: "{{ nexus_download_dir }}/nexus/bin/nexus"
  register: stat_result

- name: Message that nexus is already installed
  debug:
    msg: Nexus already installed
  when: stat_result.stat.exists

- name: Creating download dir
  file:
    path: "{{ nexus_download_dir }}"
    state: directory
  when: not stat_result.stat.exists

- name: Downloading Nexus
  get_url:
    url: "{{ nexus_download_url }}"
    dest: "{{ nexus_download_dir }}/nexus.tar.gz"
    force: no
    timeout: 300
  when: not stat_result.stat.exists

- name: Unarchiving
  unarchive:
    src: "{{ nexus_download_dir }}/nexus.tar.gz"
    dest: "{{ nexus_download_dir }}"
    copy: false
    mode: 0755
  when: not stat_result.stat.exists

- name: Renaming package
  shell: "mv -f {{ nexus_download_dir }}/nexus-3* {{ nexus_download_dir }}/nexus"
  when: not stat_result.stat.exists

- name: Cleaning up
  file:
    path: "{{ nexus_download_dir }}/nexus.tar.gz"
    state: absent
  when: not stat_result.stat.exists

- name: Creating Nexus group
  group:
    name: "{{ nexus_os_group }}"
    state: present

- name: Creating Nexus user
  user:
    name: "{{ nexus_os_user }}"
    group: "{{ nexus_os_group }}"
    home: "/home/{{ nexus_os_user }}"
    shell: "/bin/bash"
    state: present

- name: Changing privileges
  file:
    path: "{{ nexus_installation_dir }}/nexus"
    owner: "{{ nexus_os_user }}"
    group: "{{ nexus_os_group }}"
    state: directory
    recurse: yes

- name: Changing privileges
  file:
    path: "{{ nexus_installation_dir }}/sonatype-work"
    owner: "{{ nexus_os_user }}"
    group: "{{ nexus_os_group }}"
    state: directory
    recurse: yes

- name: Setting nexus user to run nexus
  copy:
    dest: /app/nexus/bin/nexus.rc
    content: |
      run_as_user="{{ nexus_os_user }}"

- name: Creating nexus systemd service
  file:
    path: "/etc/systemd/system/nexus.service"
    state: touch
  when: not stat_result.stat.exists

- name: Configuring nexus service
  copy:
    dest: "/etc/systemd/system/nexus.service"
    content: |
      [Unit]
      Description=nexus service
      After=network.target

      [Service]
      Type=forking
      LimitNOFILE={{ nexus_os_max_filedescriptors }}
      User={{ nexus_os_user }}
      Group={{ nexus_os_group }}
      ExecStart={{ nexus_installation_dir }}/nexus/bin/nexus start
      ExecStop={{ nexus_installation_dir }}/nexus/bin/nexus stop
      User={{ nexus_os_user }}
      Restart=on-abort

      [Install]
      WantedBy=multi-user.target
  when: not stat_result.stat.exists

- name: Enabling Selinux
  lineinfile:
    dest: "/etc/sysconfig/selinux"
    regexp: "^SELINUX=.*"
    line: "SELINUX=enforcing"
  when: not stat_result.stat.exists

- name: Fixing selinux rules
  ansible.builtin.shell:
    cmd: chcon -h system_u:object_r:httpd_sys_content_t:s0 {{ nexus_installation_dir }}/nexus/bin/nexus
  when: not stat_result.stat.exists

- name: Fixing selinux rules
  ansible.builtin.shell:
    cmd: chcon -R -t bin_t {{ nexus_installation_dir }}/nexus/bin/nexus
  when: not stat_result.stat.exists

- name: Getting path to default nexus settings
  set_fact:
    nexus_default_settings_file: "{{ nexus_installation_dir }}/sonatype-work/nexus3/etc/nexus.properties"

- name: Restarting systemd
  ansible.builtin.systemd:
    daemon_reload: yes

- name: Starting Nexus
  ansible.builtin.systemd:
    name: nexus
    state: started
    enabled: yes

- name: Waiting for opening default port
  wait_for:
    port: 8081
    delay: 10
