---
# tasks file for nexus-server-setup
- name: Updating
  yum:
    name: '*'
    state: latest

- name: Installing software
  yum:
    name:
      - wget
      - groovy
      - java-1.8.0-openjdk.x86_64
    state: latest

- name: Checking if nexus is already installed
  stat:
    path: "{{ nexus_download_dir ***REMOVED******REMOVED***/nexus/bin/nexus"
  register: stat_result

- name: Message that is already installed
  debug:
    msg: Nexus already installed
  when: stat_result.stat.exists

- name: Creating installation directory
  file:
    path: "{{ nexus_download_dir ***REMOVED******REMOVED***"
    state: directory
  when: not stat_result.stat.exists

- name: Cleaning up directory if not clean
  shell: "rm -rf {{ nexus_download_dir ***REMOVED******REMOVED***/*"
  when: not stat_result.stat.exists

- name: Downloading nexus
  get_url:
    url: "{{ nexus_download_url ***REMOVED******REMOVED***"
    dest: "{{ nexus_download_dir ***REMOVED******REMOVED***/nexus.tar.gz"
    force: no
    timeout: 300
  when: not stat_result.stat.exists

- name: Unpacking tar.gz
  unarchive:
    src: "{{ nexus_download_dir ***REMOVED******REMOVED***/nexus.tar.gz"
    dest: "{{ nexus_download_dir ***REMOVED******REMOVED***"
    copy: false
    mode: 0755
  when: not stat_result.stat.exists

- name: Renaming package
  shell: "mv -f {{ nexus_download_dir ***REMOVED******REMOVED***/nexus-3* {{ nexus_download_dir ***REMOVED******REMOVED***/nexus"
  when: not stat_result.stat.exists

- name: Cleaning up archieve
  file:
    path: "{{ nexus_download_dir ***REMOVED******REMOVED***/nexus.tar.gz"
    state: absent
  when: not stat_result.stat.exists

- name: Creating nexus group
  group:
    name: "{{ nexus_os_group ***REMOVED******REMOVED***"
    state: present

- name: Creating nexus user
  user:
    name: "{{ nexus_os_user ***REMOVED******REMOVED***"
    group: "{{ nexus_os_group ***REMOVED******REMOVED***"
    home: "/home/{{ nexus_os_user ***REMOVED******REMOVED***"
    shell: "/bin/bash"
    state: present

- name: Changing installation directory rights
  file:
    path: "{{ nexus_installation_dir ***REMOVED******REMOVED***/nexus"
    owner: "{{ nexus_os_user ***REMOVED******REMOVED***"
    group: "{{ nexus_os_group ***REMOVED******REMOVED***"
    state: directory
    recurse: yes

- name: Changing installation directory rights
  file:
    path: "{{ nexus_installation_dir ***REMOVED******REMOVED***/sonatype-work"
    owner: "{{ nexus_os_user ***REMOVED******REMOVED***"
    group: "{{ nexus_os_group ***REMOVED******REMOVED***"
    state: directory
    recurse: yes

- name: Running nexus as nexus user
  copy:
    dest: /app/nexus/bin/nexus.rc
    content: |
      run_as_user="{{ nexus_os_user ***REMOVED******REMOVED***"

- name: Creating nexus service
  file:
    path: "/etc/systemd/system/nexus.service"
    state: touch
  when: not stat_result.stat.exists

- name: Configuration nexus.service
  copy:
    dest: "/etc/systemd/system/nexus.service"
    content: |
      [Unit]
      Description=nexus service
      After=network.target

      [Service]
      Type=forking
      LimitNOFILE={{ nexus_os_max_filedescriptors ***REMOVED******REMOVED***
      User={{ nexus_os_user ***REMOVED******REMOVED***
      Group={{ nexus_os_group ***REMOVED******REMOVED***
      ExecStart={{ nexus_installation_dir ***REMOVED******REMOVED***/nexus/bin/nexus start
      ExecStop={{ nexus_installation_dir ***REMOVED******REMOVED***/nexus/bin/nexus stop
      User={{ nexus_os_user ***REMOVED******REMOVED***
      Restart=on-abort

      [Install]
      WantedBy=multi-user.target
  when: not stat_result.stat.exists

- name: Enabling selinux
  lineinfile:
    dest: "/etc/sysconfig/selinux"
    regexp: "^SELINUX=.*"
    line: "SELINUX=enforcing"
  when: not stat_result.stat.exists

- name: Changing selinux rules
  ansible.builtin.shell:
    cmd: chcon -h system_u:object_r:httpd_sys_content_t:s0 {{ nexus_installation_dir ***REMOVED******REMOVED***/nexus/bin/nexus
  when: not stat_result.stat.exists

- name: Changing selinux rules
  ansible.builtin.shell:
    cmd: chcon -R -t bin_t {{ nexus_installation_dir ***REMOVED******REMOVED***/nexus/bin/nexus
  when: not stat_result.stat.exists

- name: Reloading systemd daemon
  ansible.builtin.systemd:
    daemon_reload: yes

- name: Starting nexus
  ansible.builtin.systemd:
    name: nexus
    state: started

- name: Waiting for port
  wait_for:
    port: 8081
    delay: 10

- name: Setting nexus port
  lineinfile:
    dest: "{{ nexus_default_settings_file ***REMOVED******REMOVED***"
    regexp: "^application-port=.*"
    line: "application-port={{ nexus_default_port ***REMOVED******REMOVED***"

- name: Reloading systemd daemon
  ansible.builtin.systemd:
    daemon_reload: yes

- name: Restarting nexus with new preferences
  ansible.builtin.systemd:
    name: nexus
    state: started

- name: Checking settings
  stat:
    path: "{{ nexus_installation_dir ***REMOVED******REMOVED***/nexus/bin/nexus"
  register: stat_result

- name: Checking that nexus installation is correct
  debug:
    msg: Nexus is not installed
  when: not stat_result.stat.exists

- name: Exitting
  meta: end_play
  when: not stat_result.stat.exists

- name: Copying repositories preferences
  copy:
    src: "rest_jsons"
    dest: "{{ nexus_installation_dir ***REMOVED******REMOVED***"
    owner: "{{ nexus_os_user ***REMOVED******REMOVED***"
    group: "{{ nexus_os_group ***REMOVED******REMOVED***"
    mode: 0644

- name: Waiting for port nexus port
  wait_for:
    port: 8081
    delay: 10

- name: Checking that the admin password file exists
  stat:
    path: "{{ nexus_download_dir ***REMOVED******REMOVED***/nexus/bin/nexus"
  register: adm_pass_exists

- name: Changing admin password
  shell: "curl -v -X PUT -u admin:\"$(cat {{ nexus_installation_dir ***REMOVED******REMOVED***/sonatype-work/nexus3/admin.password)\" --header \"Content-Type: text/plain\" \"{{ ansible_host ***REMOVED******REMOVED***:{{ nexus_default_port ***REMOVED******REMOVED***/service/rest/v1/security/users/admin/change-password\" --data \"{{ nexus_admin_password ***REMOVED******REMOVED***\""
  register: result
  when: adm_pass_exists.stat.exists

- debug:
    var: result

- name: Creating maven hosted repo
  shell: "curl -v -X POST -u admin:{{ nexus_admin_password ***REMOVED******REMOVED*** -H \"accept: application/json\" --header \"Content-Type: application/json\" \"http://{{ ansible_host ***REMOVED******REMOVED***:{{ nexus_default_port ***REMOVED******REMOVED***/service/rest/v1/repositories/maven/hosted\" -d @{{ nexus_installation_dir ***REMOVED******REMOVED***/rest_jsons/maven_hosted_repo.json"
  register: result

- debug:
    var: result

- name: Creating maven proxy repo
  shell: "curl -v -X POST -u admin:{{ nexus_admin_password ***REMOVED******REMOVED*** -H \"accept: application/json\" --header \"Content-Type: application/json\" \"http://{{ ansible_host ***REMOVED******REMOVED***:{{ nexus_default_port ***REMOVED******REMOVED***/service/rest/v1/repositories/maven/proxy\" -d @{{ nexus_installation_dir ***REMOVED******REMOVED***/rest_jsons/maven_proxy_repo.json"
  register: result

- debug:
    var: result

- name: Changing nexus realms
  shell: "curl -v -X PUT -u admin:{{ nexus_admin_password ***REMOVED******REMOVED*** -H \"accept: application/json\" --header \"Content-Type: application/json\" \"http://{{ ansible_host ***REMOVED******REMOVED***:{{ nexus_default_port ***REMOVED******REMOVED***/service/rest/v1/security/realms/active\" -d @{{ nexus_installation_dir ***REMOVED******REMOVED***/rest_jsons/realms.json"
  register: result

- debug:
    var: result

- name: Creating docker hosted repo
  shell: "curl -v -X POST -u admin:{{ nexus_admin_password ***REMOVED******REMOVED*** -H \"accept: application/json\" --header \"Content-Type: application/json\" \"http://{{ ansible_host ***REMOVED******REMOVED***:{{ nexus_default_port ***REMOVED******REMOVED***/service/rest/v1/repositories/docker/hosted\" -d @{{ nexus_installation_dir ***REMOVED******REMOVED***/rest_jsons/docker_hosted_repo.json"
  register: result

- debug:
    var: result
